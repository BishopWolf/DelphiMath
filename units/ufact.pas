{ ******************************************************************
  Factorial
  ****************************************************************** }

unit ufact;

interface

uses
  uConstants, ugamma;

function Fact(N: Integer): Float;

implementation

const
  NFact = 33;

  FactArray: array [0 .. NFact] of Float = (1.0, // 0
    1.0, // 1
    2.0, // 2
    6.0, // 3
    24.0, // 4
    120.0, // 5
    720.0, // 6
    5040.0, // 7
    40320.0, // 8
    362880.0, // 9
    3628800.0, // 10
    39916800.0, // 11
    479001600.0, // 12
    6227020800.0, // 13
    87178291200.0, // 14
    1307674368000.0, // 15
    20922789888000.0, // 16
    355687428096000.0, // 17
    6402373705728000.0, // 18
    121645100408832000.0, // 19
    2432902008176640000.0, // 20
    51090942171709440000.0, // 21
    1124000727777607680000.0, // 22
    25852016738884976640000.0, // 23
    620448401733239439360000.0, // 24
    15511210043330985984000000.0, // 25
    403291461126605635584000000.0, // 26
    10888869450418352160768000000.0, // 27
    304888344611713860501504000000.0, // 28
    8841761993739701954543616000000.0, // 29
    265252859812191058636308480000000.0, // 30
    8222838654177922817725562880000000.0, // 31
    263130836933693530167218012160000000.0, // 32
    8683317618811886495518194401280000000.0); // 33

function Fact(N: Integer): Float;
begin
  SetErrCode(FOk);
  if N < 0 then
    Fact := DefaultVal(FDomain, 1.0)
  else if N <= NFact then
    Fact := FactArray[N]
  else if (N + 1 <= MaxGam) then
    Fact := Gamma(N + 1)
  else
    Fact := DefaultVal(FOverflow, MaxNum);
end;

end.
